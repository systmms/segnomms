name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run linting
      run: |
        make test-lint

    - name: Run type checking
      run: |
        make test-typecheck

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Run structural tests
      run: |
        make test-structural

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Test documentation build
      run: |
        make test-docs

    - name: Build documentation
      run: |
        make docs

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/build/html/

  compatibility:
    name: Segno Compatibility
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Test Segno compatibility
      run: |
        make test-segno-compatibility

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: librsvg2-bin
        version: 1.0

    - name: Install system dependencies (fallback)
      run: |
        # Fallback if cache action fails
        if ! command -v rsvg-convert &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y librsvg2-bin
        fi

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run visual regression tests
      run: |
        make test-visual

    - name: Upload visual test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results
        path: |
          tests/visual/output/
          tests/visual/diff/

  examples:
    name: Example Generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: librsvg2-bin
        version: 1.0

    - name: Install system dependencies (fallback)
      run: |
        # Fallback if cache action fails
        if ! command -v rsvg-convert &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y librsvg2-bin
        fi

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Generate examples
      run: |
        make test-examples

    - name: Upload example artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-examples
        path: examples-generated/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run security scan with bandit
      run: |
        uv pip install bandit
        uv run bandit -r segnomms/ -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, documentation, compatibility, visual-regression, examples, security]
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Test suite failed"
          exit 1
        fi

        if [[ "${{ needs.documentation.result }}" != "success" ]]; then
          echo "❌ Documentation build failed"
          exit 1
        fi

        if [[ "${{ needs.compatibility.result }}" != "success" ]]; then
          echo "❌ Segno compatibility tests failed"
          exit 1
        fi

        if [[ "${{ needs.visual-regression.result }}" != "success" ]]; then
          echo "⚠️  Visual regression tests failed - review required"
          # Don't exit on visual failures as they may be intentional
        fi

        if [[ "${{ needs.examples.result }}" != "success" ]]; then
          echo "⚠️  Example generation failed"
          # Don't exit on example failures
        fi

        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "⚠️  Security scan encountered issues"
          # Don't exit on security scan failures in CI
        fi

        echo "✅ Quality gate passed"


