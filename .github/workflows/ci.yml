name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
      - 'repo/setup_apt_fallback.sh'
      - 'repo/quality_gate_checker.sh'
      - 'repo/test_segno_compatibility.py'
      - 'repo/generate_example_qrs.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
      - 'repo/setup_apt_fallback.sh'
      - 'repo/quality_gate_checker.sh'
      - 'repo/test_segno_compatibility.py'
      - 'repo/generate_example_qrs.py'

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run linting
      run: |
        make test-lint

    - name: Run type checking
      run: |
        make test-typecheck

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Run structural tests
      run: |
        make test-structural

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  documentation:
    name: Documentation Build
    uses: ./.github/workflows/_docs-build.yml
    with:
      python-version: "3.11"
      fetch-depth: 1
      upload-artifacts: true
      run-link-check: false
      run-coverage-report: false
      dependency-check: true

  compatibility:
    name: Segno Compatibility
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Test Segno compatibility
      run: |
        make test-segno-compatibility

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        lfs: true

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: librsvg2-bin
        version: 1.0

    - name: Install system dependencies (fallback)
      run: ./repo/setup_apt_fallback.sh librsvg2-bin

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run visual regression tests
      run: |
        make test-visual

    - name: Upload visual test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results
        path: |
          tests/visual/output/
          tests/visual/diff/

  examples:
    name: Example Generation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: librsvg2-bin
        version: 1.0

    - name: Install system dependencies (fallback)
      run: ./repo/setup_apt_fallback.sh librsvg2-bin

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Generate examples
      run: |
        make test-examples

    - name: Upload example artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-examples
        path: examples-generated/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run security scan with bandit
      run: |
        uv pip install bandit
        uv run bandit -c .bandit -r segnomms/ -f json -o bandit-report.json --exit-zero

    - name: Summarize security scan
      if: always()
      run: uv run python repo/summarize_security_scan.py --report bandit-report.json

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, documentation, compatibility, visual-regression, examples, security]
    if: always()
    steps:
    - uses: actions/checkout@v5

    - name: Evaluate quality gate
      run: |
        ./repo/quality_gate_checker.sh \
          --test="${{ needs.test.result }}" \
          --docs="${{ needs.documentation.result }}" \
          --compatibility="${{ needs.compatibility.result }}" \
          --visual="${{ needs.visual-regression.result }}" \
          --examples="${{ needs.examples.result }}" \
          --security="${{ needs.security.result }}" \
          --verbose
