name: Validate Release

on:
  workflow_call:
  pull_request:
    paths:
      - 'segnomms/**'
      - 'pyproject.toml'
      - 'tests/**'
      - '.github/workflows/validate-release.yml'

jobs:
  # Run standard Python tests across multiple versions and OS
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }} with Segno ${{ matrix.segno-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # Core test combinations for faster feedback
        include:
          # Ubuntu: Test all Python versions with latest Segno (most common scenario)
          - os: ubuntu-latest
            python-version: "3.9"
            segno-version: "latest"
          - os: ubuntu-latest
            python-version: "3.10"
            segno-version: "latest"
          - os: ubuntu-latest
            python-version: "3.11"
            segno-version: "latest"
          - os: ubuntu-latest
            python-version: "3.12"
            segno-version: "latest"
          - os: ubuntu-latest
            python-version: "3.13"
            segno-version: "latest"

          # Ubuntu: Test compatibility with older Segno versions on key Python versions
          - os: ubuntu-latest
            python-version: "3.11"
            segno-version: "1.6.0"
          - os: ubuntu-latest
            python-version: "3.11"
            segno-version: "1.5.2"

          # Cross-platform: Test latest Python on other OS with latest Segno
          - os: windows-latest
            python-version: "3.12"
            segno-version: "latest"
          - os: macos-latest
            python-version: "3.12"
            segno-version: "latest"

          # Cross-platform: Test oldest supported Python
          - os: windows-latest
            python-version: "3.9"
            segno-version: "latest"
          - os: macos-latest
            python-version: "3.9"
            segno-version: "latest"
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        shell: bash
        run: |
          uv sync --extra test
          if [ "${{ matrix.segno-version }}" = "latest" ]; then
            uv pip install segno
          else
            uv pip install segno==${{ matrix.segno-version }}
          fi
          uv pip install -e .

      - name: Run tests
        run: |
          uv run pytest tests/ -v --cov=segnomms --cov-report=xml

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Validate package build and metadata
  validate-package:
    name: Validate Package Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install build tools
        run: |
          uv pip install --system build twine wheel check-wheel-contents

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Check wheel contents
        run: |
          check-wheel-contents dist/*.whl

      - name: Validate package metadata
        run: |
          # Standard package metadata validation
          echo "Package validation completed with twine and check-wheel-contents"
          echo "Build artifacts:"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Test package installation
  test-install:
    name: Test Package Installation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-package
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.13"]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Install from wheel
        run: |
          # Create virtual environment and install wheel
          uv venv
          uv pip install dist/*.whl

      - name: Test import and basic usage
        run: |
          # Use the wheel we just downloaded, not PyPI
          uv run python -c "import segnomms; print(f'Version: {segnomms.__version__}')"
          uv run python -c "
          import segno
          from segnomms import write
          qr = segno.make('Test')
          write(qr, 'test.svg', shape='rounded')
          print('Basic functionality works!')
          "

      - name: Run example scripts
        run: |
          # Install segno if needed
          uv pip install segno
          cd examples
          uv run python simple_example.py

  # Security and quality checks
  quality-checks:
    name: Quality and Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install tools
        run: |
          uv sync
          uv pip install safety bandit flake8 mypy black isort

      - name: Security check with safety
        run: |
          uv pip install -e .
          uv run safety check || true  # Don't fail on vulnerabilities, just report

      - name: Security check with bandit
        run: |
          uv run bandit -r segnomms -ll || true  # Low severity and higher

      - name: Lint with flake8
        run: |
          uv run flake8 segnomms --count --statistics || true

      - name: Type check with mypy
        run: |
          uv run mypy segnomms --ignore-missing-imports || true

      - name: Check formatting
        run: |
          uv run black --check .
          uv run isort --check-only .

  # Final validation status
  validate-status:
    name: Validation Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test-matrix, validate-package, test-install, quality-checks]
    if: always()
    steps:
      - uses: actions/checkout@v5

      - name: Check validation results
        run: |
          ./repo/validate_release_status.sh \
            --test-matrix="${{ needs.test-matrix.result }}" \
            --package="${{ needs.validate-package.result }}" \
            --install="${{ needs.test-install.result }}" \
            --quality="${{ needs.quality-checks.result }}" \
            --verbose
