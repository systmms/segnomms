name: Manual Publish to PyPI

# This workflow is kept for emergency manual releases only.
# Normal releases should go through Release Please workflow.

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0) - USE RELEASE PLEASE INSTEAD!'
        required: true
        type: string
      confirm:
        description: 'Type "CONFIRM" to proceed with manual release'
        required: true
        type: string

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
          echo "‚ùå Manual release not confirmed. Please type CONFIRM to proceed."
          echo "‚ö†Ô∏è  Consider using Release Please workflow instead for automated releases."
          exit 1
        fi
        echo "‚ö†Ô∏è  Manual release confirmed. Proceeding..."
        echo "üìù Note: Future releases should use the Release Please workflow."

  build:
    needs: validate-input
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  test-install:
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install from PyPI
      run: |
        # Wait a bit for PyPI to update
        sleep 60
        python -m pip install --upgrade pip
        pip install segnomms

    - name: Test import
      run: |
        python -c "import segnomms; print(f'Successfully imported segnomms version {segnomms.__version__}')"

    - name: Test basic usage
      run: |
        python -c "
        import segno
        # Test that the plugin is registered
        qr = segno.make('Hello World')
        # This should work if the plugin is properly installed
        print('Plugin is available')
        "
