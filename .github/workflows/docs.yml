name: Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
    - 'docs/**'
    - 'segnomms/**/*.py'
    - 'README.md'
    - 'CHANGELOG.md'
    - 'repo/check_doc_*.py'
    - 'repo/spell_check_docs.py'
    - 'repo/aspell_project_dict.txt'
    - 'repo/setup_spell_checker.sh'
    - 'repo/test_readme_examples.py'
    - 'repo/generate_example_qrs.py'
    - 'repo/docs_quality_gate.sh'
    - '.github/workflows/docs.yml'
  release:
    types: [published]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --extra docs
        uv pip install -e .

    - name: Check documentation dependencies
      run: python repo/check_doc_dependencies.py

    - name: Build HTML documentation
      run: |
        cd docs
        make html

    - name: Check for broken links
      run: |
        cd docs
        make linkcheck || echo "Link check completed with warnings"

    - name: Generate API documentation coverage report
      run: |
        cd docs
        make coverage-report

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-html
        path: docs/build/html/

    - name: Upload documentation coverage
      uses: actions/upload-artifact@v4
      with:
        name: documentation-coverage
        path: docs/doc-coverage.md

  test-examples:
    name: Test Documentation Examples
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --extra test
        uv pip install -e .

    - name: Install system dependencies for SVG processing
      run: |
        sudo apt-get update
        sudo apt-get install -y librsvg2-bin

    - name: Test README examples
      run: python repo/test_readme_examples.py

    - name: Generate example QR codes
      run: python repo/generate_example_qrs.py

    - name: Upload example outputs
      uses: actions/upload-artifact@v4
      with:
        name: documentation-examples
        path: example-outputs/

  spell-check:
    name: Spell Check Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: aspell aspell-en
        version: 1.0

    - name: Install spell checker (fallback)
      run: ./repo/setup_spell_checker.sh

    - name: Verify aspell installation
      run: |
        echo "üîç Verifying aspell installation..."
        aspell --version || echo "‚ùå aspell not available"
        echo "üìö Available dictionaries:"
        aspell dicts || echo "‚ùå No dictionaries found"
        echo "üß™ Testing dictionary access:"
        echo "test hello wrold" | aspell list || echo "‚ùå Dictionary test failed"

    - name: Check spelling in documentation
      run: python repo/spell_check_docs.py

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs, test-examples]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-html
        path: docs-html/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs-html/
        destination_dir: docs

    - name: Comment documentation URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.issue.number;

          const body = `## üìö Documentation Preview

          The documentation has been built successfully!

          **Preview URL:** https://${owner}.github.io/${repo}/docs/

          ### Documentation Coverage
          - Built from commit: ${{ github.sha }}
          - All examples tested and validated
          - Spelling checked for common errors

          üìÅ Full documentation artifacts are available in this workflow run.
          `;

          await github.rest.issues.createComment({
            issue_number: pr_number,
            owner: owner,
            repo: repo,
            body: body
          });

  documentation-quality-gate:
    name: Documentation Quality Gate
    runs-on: ubuntu-latest
    needs: [build-docs, test-examples, spell-check]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Evaluate documentation quality
      run: |
        ./repo/docs_quality_gate.sh \
          --build="${{ needs.build-docs.result }}" \
          --examples="${{ needs.test-examples.result }}" \
          --spell="${{ needs.spell-check.result }}" \
          --verbose
