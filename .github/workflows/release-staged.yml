name: Staged Release (Beta → Stable)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      is_prerelease: ${{ contains(steps.release.outputs.version, '-') }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

  # Publish to GitHub Packages (all releases)
  publish-github-packages:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to GitHub Packages
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          twine upload --repository-url https://npm.pkg.github.com/ dist/*
          echo "✅ Published version ${{ needs.release-please.outputs.version }} to GitHub Packages"

  # Test installation from GitHub Packages
  test-github-packages:
    needs: [release-please, publish-github-packages]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        segno-version: ['1.5.2', '1.6.0', 'latest']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Configure pip for GitHub Packages
        run: |
          echo "[global]" > ~/.pypirc
          echo "index-url = https://pypi.org/simple" >> ~/.pypirc
          echo "extra-index-url = https://npm.pkg.github.com/" >> ~/.pypirc

      - name: Install from GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install --index-url https://npm.pkg.github.com/ \
                      --extra-index-url https://pypi.org/simple \
                      segnomms==${{ needs.release-please.outputs.version }}

          # Install specific Segno version
          if [ "${{ matrix.segno-version }}" = "latest" ]; then
            pip install segno
          else
            pip install segno==${{ matrix.segno-version }}
          fi

      - name: Run tests
        run: |
          python -m pytest tests/ -v

  # Promote stable releases to PyPI
  publish-pypi:
    needs: [release-please, test-github-packages]
    # Only run for stable releases (no - in version)
    if: ${{ needs.release-please.outputs.release_created && !contains(needs.release-please.outputs.version, '-') }}
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download from GitHub Packages and re-upload to PyPI
        run: |
          python -m pip install --upgrade pip
          pip install twine

          # Download the already built package from GitHub Packages
          pip download --index-url https://npm.pkg.github.com/ \
                       --no-deps \
                       --dest ./dist \
                       segnomms==${{ needs.release-please.outputs.version }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Final validation from PyPI
  validate-pypi:
    needs: [release-please, publish-pypi]
    if: ${{ needs.release-please.outputs.release_created && !contains(needs.release-please.outputs.version, '-') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.11', '3.12']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for PyPI availability
        run: sleep 60

      - name: Install from PyPI
        run: |
          pip install segnomms==${{ needs.release-please.outputs.version }}

      - name: Validate installation
        run: |
          python -c "import segnomms; print(f'✅ Successfully validated segnomms {segnomms.__version__} from PyPI')"
          python -c "import segno; qr = segno.make('test'); print('✅ Plugin is working correctly')"
