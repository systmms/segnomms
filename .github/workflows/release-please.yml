name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build and publish to PyPI when a release is created
  build-and-publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Test installation from PyPI after publishing
  test-pypi-install:
    needs: [release-please, build-and-publish]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for PyPI availability
        run: |
          echo "Waiting for package to be available on PyPI..."
          sleep 60

      - name: Install from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install segnomms==${{ needs.release-please.outputs.version }}

      - name: Verify installation
        run: |
          python -c "import segnomms; print(f'Successfully installed segnomms version {segnomms.__version__}')"
          python -c "import segno; qr = segno.make('Test'); print('Plugin integration successful')"

  # Create GitHub Release assets
  upload-release-assets:
    needs: [release-please, build-and-publish]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} dist/* --clobber

  # Trigger Read the Docs build when a release is created
  trigger-readthedocs:
    name: Trigger Read the Docs
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    steps:
      - name: Activate RTD version for release tag
        env:
          RTD_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          RTD_PROJECT: segnomms
          RTD_VERSION: ${{ needs.release-please.outputs.tag_name }}
        run: |
          if [ -z "$RTD_TOKEN" ]; then
            echo "READTHEDOCS_TOKEN secret is not set" >&2
            exit 1
          fi
          echo "Activating RTD version \"$RTD_VERSION\" for project \"$RTD_PROJECT\""
          curl -fsSL -X PATCH \
            -H "Authorization: Token $RTD_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"active": true, "hidden": false}' \
            "https://readthedocs.org/api/v3/projects/$RTD_PROJECT/versions/$RTD_VERSION/"

      - name: Trigger RTD build for release tag
        env:
          RTD_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          RTD_PROJECT: segnomms
          RTD_VERSION: ${{ needs.release-please.outputs.tag_name }}
        run: |
          echo "Triggering RTD build for tag \"$RTD_VERSION\""
          curl -fsSL -X POST \
            -H "Authorization: Token $RTD_TOKEN" \
            "https://readthedocs.org/api/v3/projects/$RTD_PROJECT/versions/$RTD_VERSION/builds/"

      - name: Trigger RTD build for latest
        env:
          RTD_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          RTD_PROJECT: segnomms
        run: |
          if [ -z "$RTD_TOKEN" ]; then
            echo "READTHEDOCS_TOKEN secret is not set" >&2
            exit 1
          fi
          echo "Triggering Read the Docs build for project \"$RTD_PROJECT\" (version: latest)"
          curl -fsSL -X POST \
            -H "Authorization: Token $RTD_TOKEN" \
            "https://readthedocs.org/api/v3/projects/$RTD_PROJECT/versions/latest/builds/"

      - name: Trigger RTD build for stable (best-effort)
        env:
          RTD_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          RTD_PROJECT: segnomms
        run: |
          echo "Triggering Read the Docs build for project \"$RTD_PROJECT\" (version: stable)"
          # This may be inactive if 'stable' is not enabled; ignore errors
          curl -fsSL -X POST \
            -H "Authorization: Token $RTD_TOKEN" \
            "https://readthedocs.org/api/v3/projects/$RTD_PROJECT/versions/stable/builds/" || true
