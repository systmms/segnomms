name: Coverage Tracking

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'

env:
  PYTHON_VERSION: "3.11"

jobs:
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run comprehensive test coverage
      run: repo/run_comprehensive_coverage.sh

    - name: Generate coverage badge
      run: repo/generate_coverage_badge.sh

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: htmlcov/

    - name: Generate coverage summary
      run: repo/generate_coverage_summary.sh

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const summary = fs.readFileSync('coverage-summary.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Could not post coverage comment:', error);
          }

  coverage-diff:
    name: Coverage Diff
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ env.PYTHON_VERSION }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Run coverage for current branch
      run: |
        uv run pytest tests/ --cov=segnomms --cov-report=xml:coverage-current.xml -q
        CURRENT_COVERAGE=$(uv run coverage report --format=total)
        echo "CURRENT_COVERAGE=${CURRENT_COVERAGE}" >> "${GITHUB_ENV}"

    - name: Run coverage for base branch
      run: |
        git checkout origin/${{ github.base_ref }}
        uv sync
        uv pip install -e .
        uv run pytest tests/ --cov=segnomms --cov-report=xml:coverage-base.xml -q || true
        BASE_COVERAGE=$(uv run coverage report --format=total 2>/dev/null || echo "0")
        echo "BASE_COVERAGE=${BASE_COVERAGE}" >> "${GITHUB_ENV}"

    - name: Calculate coverage diff
      run: repo/calculate_coverage_diff.sh

    - name: Comment coverage diff
      uses: actions/github-script@v7
      with:
        script: |
          const diff = process.env.COVERAGE_DIFF;
          const current = process.env.CURRENT_COVERAGE;
          const base = process.env.BASE_COVERAGE;
          const icon = process.env.DIFF_ICON;

          const diffText = diff > 0 ? `+${diff}%` : `${diff}%`;

          const body = `## ${icon} Coverage Comparison

          | | Coverage |
          |---|---|
          | **Current Branch** | ${current}% |
          | **Base Branch** | ${base}% |
          | **Difference** | ${diffText} |

          ${diff < -5 ? '⚠️ **Warning:** Significant coverage decrease detected!' : ''}
          ${diff > 5 ? '🎉 **Great!** Coverage improved significantly!' : ''}
          `;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  coverage-quality-gate:
    name: Coverage Quality Gate
    runs-on: ubuntu-latest
    needs: [coverage-analysis, coverage-diff]
    if: always()

    steps:
    - name: Check coverage requirements
      run: |
        echo "Coverage quality gate evaluation:"

        # This is a placeholder for more sophisticated quality gate logic
        # In a real implementation, you would check the coverage results
        # and fail the job if coverage falls below thresholds

        echo "✅ Coverage quality gate passed"

