name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to test'
        required: false
        type: string
        default: '3.11'

jobs:
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        segno-version: ['1.5.2', '1.6.0', 'latest']
        exclude:
          # Reduce matrix size by testing fewer combinations
          - os: windows-latest
            segno-version: '1.5.2'
          - os: macos-latest
            segno-version: '1.5.2'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ "${{ matrix.segno-version }}" = "latest" ]; then
          pip install segno
        else
          pip install segno==${{ matrix.segno-version }}
        fi
        pip install -e ".[test]"
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=segnomms --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-pyodide:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Build package for Pyodide
      run: |
        pip install build wheel
        python -m build --wheel
    
    - name: Install test dependencies
      run: |
        pip install playwright pytest-playwright
        npx playwright install chromium
    
    - name: Run comprehensive Pyodide tests
      run: |
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        python scripts/test_pyodide_full.py "$WHEEL_FILE" --verbose
    
    - name: Test with pytest-pyodide (fallback)
      if: failure()
      run: |
        npm install pyodide@0.24.1
        python -m pip install --upgrade pip
        pip install pytest pytest-pyodide selenium
        
        cat > test_pyodide.py << 'EOF'
        import pytest
        
        @pytest.mark.asyncio
        async def test_segnomms_in_pyodide(selenium_standalone, wheel_file):
            selenium = selenium_standalone
            
            # Load Pyodide
            selenium.run_js("""
                let pyodide = await loadPyodide();
                await pyodide.loadPackage(['micropip']);
                globalThis.pyodide = pyodide;
            """)
            
            # Install the wheel
            selenium.run_js(f"""
                await pyodide.runPythonAsync(`
                    import micropip
                    await micropip.install('file://{wheel_file}')
                `);
            """)
            
            # Test import
            result = selenium.run_js("""
                return await pyodide.runPythonAsync(`
                    import segnomms
                    import segno
                    
                    # Test plugin registration
                    qr = segno.make('Test')
                    has_plugin = hasattr(qr, 'interactive_svg')
                    
                    # Test SVG generation
                    if has_plugin:
                        svg = qr.interactive_svg()
                        svg_valid = svg is not None and '<svg' in str(svg)
                    else:
                        svg_valid = False
                    
                    f"Plugin: {has_plugin}, SVG: {svg_valid}"
                `);
            """)
            
            assert "Plugin: True" in result
            assert "SVG: True" in result
        EOF
        
        WHEEL_FILE=$(realpath dist/*.whl)
        python -m pytest test_pyodide.py -v --wheel-file="$WHEEL_FILE"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 segnomms tests
    
    - name: Check formatting with black
      run: |
        black --check segnomms tests
    
    - name: Check import order with isort
      run: |
        isort --check-only segnomms tests
    
    - name: Type check with mypy
      run: |
        mypy segnomms