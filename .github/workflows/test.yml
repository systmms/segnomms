name: Test

# This workflow runs different test matrices based on the trigger:
# - PRs: Quick tests (2 combinations: Ubuntu + Python 3.11/3.13 + latest Segno)
# - Main pushes: Full matrix (45 combinations: 3 OS + 5 Python + 3 Segno versions)
# - Manual dispatch: Choose between quick or full tests with "run_full_tests" input
# Contributors can request full tests on PRs using workflow_dispatch with run_full_tests=true

on:
  push:
    branches: [ main ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'repo/setup_cairo_*.sh'
      - 'repo/setup_cairo_*.ps1'
      - 'repo/test_pypi_install.sh'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'repo/setup_cairo_*.sh'
      - 'repo/setup_cairo_*.ps1'
      - 'repo/test_pypi_install.sh'
      - '.github/workflows/test.yml'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test matrix (45 combinations)'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to test'
        required: false
        type: string
        default: '3.11'

jobs:
  # Quick tests for PRs - only essential combinations
  test-python-pr:
    # if: github.event_name == 'pull_request' && inputs.run_full_tests != true
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11', '3.13'] # Current LTS and latest
        segno-version: ['latest']

    steps:
    - uses: actions/checkout@v5

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: ./repo/setup_cairo_macos.sh --verbose

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: .\repo\setup_cairo_windows.ps1 -Verbose
      shell: pwsh

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --extra test
        uv pip install -e .

    - name: Install Segno (latest)
      if: matrix.segno-version == 'latest'
      run: uv pip install segno

    - name: Install Segno (specific version)
      if: matrix.segno-version != 'latest'
      run: uv pip install segno==${{ matrix.segno-version }}

    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=segnomms --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Full comprehensive tests for main branch or explicit request
  # test-python-full:
  #   if: github.event_name == 'push' || inputs.run_full_tests == true
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
  #       segno-version: ['1.5.2', '1.6.0', 'latest']
  #       exclude:
  #         # Reduce matrix size by testing fewer combinations
  #         - os: windows-latest
  #           segno-version: '1.5.2'
  #         - os: macos-latest
  #           segno-version: '1.5.2'

  #   steps:
  #   - uses: actions/checkout@v5

  #   - name: Install system dependencies (macOS)
  #     if: runner.os == 'macOS'
  #     run: ./repo/setup_cairo_macos.sh --verbose

  #   - name: Install system dependencies (Windows)
  #     if: runner.os == 'Windows'
  #     run: .\repo\setup_cairo_windows.ps1 -Verbose
  #     shell: pwsh

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v3
  #     with:
  #       enable-cache: true
  #       cache-dependency-glob: "**/uv.lock"

  #   - name: Install dependencies
  #     run: |
  #       uv sync --extra test
  #       uv pip install -e .

  #   - name: Install Segno (latest)
  #     if: matrix.segno-version == 'latest'
  #     run: uv pip install segno

  #   - name: Install Segno (specific version)
  #     if: matrix.segno-version != 'latest'
  #     run: uv pip install segno==${{ matrix.segno-version }}

  #   - name: Run tests
  #     run: |
  #       uv run pytest tests/ -v --cov=segnomms --cov-report=xml --cov-report=term

  #   - name: Upload coverage to Codecov
  #     if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
  #     uses: codecov/codecov-action@v5
  #     with:
  #       file: ./coverage.xml
  #       flags: unittests
  #       name: codecov-umbrella

  test-wheel:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies for building
      run: |
        uv sync
        uv pip install -e .

    - name: Build package wheel
      run: |
        uv build --wheel

    - name: Test wheel installation (local wheel)
      run: |
        WHEEL_PATH=$(ls dist/*.whl)
        echo "Testing wheel: ${WHEEL_PATH}"
        repo/test_pypi_install.sh --no-wait --wheel="${WHEEL_PATH}" --verbose

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python3.11-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python3.11-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Lint with flake8
      run: |
        uv run flake8 segnomms tests

    - name: Check formatting with black
      run: |
        uv run black --check segnomms tests

    - name: Check import order with isort
      run: |
        uv run isort --check-only segnomms tests

    - name: Type check with mypy
      run: |
        uv run mypy segnomms
