name: Test

on:
  push:
    branches: [ main ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to test'
        required: false
        type: string
        default: '3.11'

jobs:
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        segno-version: ['1.5.2', '1.6.0', 'latest']
        exclude:
          # Reduce matrix size by testing fewer combinations
          - os: windows-latest
            segno-version: '1.5.2'
          - os: macos-latest
            segno-version: '1.5.2'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ "${{ matrix.segno-version }}" = "latest" ]; then
          pip install segno
        else
          pip install segno==${{ matrix.segno-version }}
        fi
        pip install -e ".[test]"

    - name: Run tests
      run: |
        pytest tests/ -v --cov=segnomms --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-wheel:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Build package wheel
      run: |
        pip install build wheel
        python -m build --wheel

    - name: Test wheel installation
      run: repo/test_wheel_installation.sh

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python3.11-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python3.11-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Lint with flake8
      run: |
        uv run flake8 segnomms tests

    - name: Check formatting with black
      run: |
        uv run black --check segnomms tests

    - name: Check import order with isort
      run: |
        uv run isort --check-only segnomms tests

    - name: Type check with mypy
      run: |
        uv run mypy segnomms

