name: Test

on:
  push:
    branches: [ main ]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
      - 'segnomms/**/*.py'
      - 'tests/**/*.py'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to test'
        required: false
        type: string
        default: '3.11'

jobs:
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        segno-version: ['1.5.2', '1.6.0', 'latest']
        exclude:
          # Reduce matrix size by testing fewer combinations
          - os: windows-latest
            segno-version: '1.5.2'
          - os: macos-latest
            segno-version: '1.5.2'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install Cairo and related libraries
        brew install cairo pkg-config gobject-introspection

        # Set up environment for both x86_64 and ARM64 Macs
        if [[ "$(uname -m)" == "arm64" ]]; then
          # Apple Silicon (M1/M2) - Homebrew uses /opt/homebrew
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig:\$PKG_CONFIG_PATH" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=/opt/homebrew/lib:\$DYLD_LIBRARY_PATH" >> "$GITHUB_ENV"
        else
          # Intel Macs - Homebrew uses /usr/local
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:\$PKG_CONFIG_PATH" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=/usr/local/lib:\$DYLD_LIBRARY_PATH" >> "$GITHUB_ENV"
        fi

        # Verify Cairo installation
        pkg-config --exists cairo
        echo "Cairo version: $(pkg-config --modversion cairo)"

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install Cairo dependencies
        choco install pkgconfiglite -y

        # Download and install pre-built Cairo binaries
        Invoke-WebRequest -Uri "https://github.com/preshing/cairo-windows/releases/download/v1.15.12/cairo-windows-1.15.12.zip" -OutFile "cairo-windows.zip"
        Expand-Archive -Path "cairo-windows.zip" -DestinationPath "C:\cairo"

        # Set up environment variables
        echo "C:\cairo\bin" >> $env:GITHUB_PATH
        echo "PKG_CONFIG_PATH=C:\cairo\lib\pkgconfig" >> $env:GITHUB_ENV
        echo "CAIRO_ROOT=C:\cairo" >> $env:GITHUB_ENV
        echo "CAIRO_INCLUDE_PATH=C:\cairo\include" >> $env:GITHUB_ENV
        echo "CAIRO_LIB_PATH=C:\cairo\lib" >> $env:GITHUB_ENV

        # Verify installation
        if (Test-Path "C:\cairo\bin\libcairo-2.dll") {
          Write-Host "Cairo DLL found successfully"
        } else {
          Write-Host "WARNING: Cairo DLL not found at expected path"
          Get-ChildItem -Path "C:\cairo" -Recurse -Name "*.dll" | Where-Object { $_ -like "*cairo*" }
        }
      shell: pwsh

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Install Segno (latest)
      if: matrix.segno-version == 'latest'
      run: pip install segno

    - name: Install Segno (specific version)
      if: matrix.segno-version != 'latest'
      run: pip install segno==${{ matrix.segno-version }}

    - name: Run tests
      run: |
        pytest tests/ -v --cov=segnomms --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-wheel:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Build package wheel
      run: |
        pip install build wheel
        python -m build --wheel

    - name: Test wheel installation
      run: repo/test_wheel_installation.sh

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache UV and Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-python3.11-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-python3.11-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync
        uv pip install -e .

    - name: Lint with flake8
      run: |
        uv run flake8 segnomms tests

    - name: Check formatting with black
      run: |
        uv run black --check segnomms tests

    - name: Check import order with isort
      run: |
        uv run isort --check-only segnomms tests

    - name: Type check with mypy
      run: |
        uv run mypy segnomms

