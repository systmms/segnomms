# Lefthook configuration for segnomms
# See https://github.com/evilmartians/lefthook for more information

commit-msg:
  commands:
    conventional-commits:
      run: ./repo/validate_conventional_commits.sh --commit-msg="{1}" --local-mode

pre-commit:
  # Run sequentially to avoid concurrent 'git add' (index.lock) when stage_fixed is used
  parallel: false
  commands:
    # GitHub Actions linting
    actionlint:
      glob: ".github/workflows/*.{yml,yaml}"
      run: actionlint {staged_files}
    validate-gha-event-fixtures:
      # Only run when event/test JSON files changed
      glob: "repo/gha/{events,tests}/**/*.json"
      # Lefthook expands {staged_files} to the matching staged files
      run: node repo/gha/scripts/validate-event-payloads.mjs --format {staged_files}
      # If the script reformats JSON, auto re-stage fixes
      stage_fixed: true
    # Python code formatting - Black
    black:
      glob: "*.py"
      run: black {staged_files}
      stage_fixed: true
    # Python import sorting - isort
    isort:
      glob: "*.py"
      run: isort --profile black {staged_files}
      stage_fixed: true
    # Python linting - Flake8
    flake8:
      glob: "*.py"
      exclude: "examples/**/*.py"
      # F841: Unused variables (Priority 1) - STRATEGIC (enhanced with validation assertions)
      run: flake8 --extend-ignore=F841 {staged_files}
    # General file checks - using pre-commit-hooks for autofix
    trailing-whitespace:
      run: python -m pre_commit_hooks.trailing_whitespace_fixer {staged_files}
      stage_fixed: true

    end-of-file:
      run: |
        python -m pre_commit_hooks.end_of_file_fixer {staged_files}
      stage_fixed: true

    check-yaml:
      glob: "*.{yml,yaml}"
      exclude: ".github/workflows/*.{yml,yaml}"
      run: |
        for file in {staged_files}; do
          python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
        done

    check-json:
      glob: "*.json"
      run: |
        for file in {staged_files}; do
          python -m json.tool "$file" > /dev/null || exit 1
        done

    check-merge-conflict:
      run: git diff --check --cached

    debug-statements:
      glob: "*.py"
      run: |
        for file in {staged_files}; do
          if grep -E '(import pdb|pdb\.set_trace\(\)|import ipdb|ipdb\.set_trace\(\))' "$file"; then
            echo "Debug statements found in $file"
            exit 1
          fi
        done

    # Type checking - MyPy with comprehensive configuration from pyproject.toml
    mypy:
      glob: "*.py"
      exclude: "tests/|examples/|repo/"
      run: mypy {staged_files}

    # Security scanning with bandit
    bandit:
      glob: "*.py"
      exclude: "tests/|examples/|repo/"
      run: bandit -c .bandit -r {staged_files}

    # Repository scripts should trigger when changed
    repo-scripts:
      glob: "repo/*.py"
      run: |
        echo "Repository script changed: {staged_files}"
        echo "Consider running relevant tests if scripts are modified"

    # Documentation dependency check (for docs changes)
    doc-dependencies:
      glob: "docs/**/*.{rst,md,py}"
      run: python repo/check_doc_dependencies.py

    # Documentation build test (optional - can be skipped with LEFTHOOK_EXCLUDE)
    doc-build:
      glob: "docs/**/*.{rst,md,py}"
      run: python repo/check_doc_build.py --skip-if-missing-deps --quiet

    # Documentation reference validation (validates cross-references, toctrees, API refs)
    doc-references:
      glob: "docs/**/*.rst"
      run: python repo/validate_docs_references.py

    # Documentation spell checking with cspell (optional - can be skipped with LEFTHOOK_EXCLUDE)
    spell-check:
      glob: "docs/**/*.{rst,md}"
      run: |
        # Install cspell if needed
        if ! command -v npx &> /dev/null || ! npx cspell --version &> /dev/null 2>&1; then
          echo "Installing cspell (Code Spell Checker)..."
          ./repo/setup_cspell.sh
        fi
        # Run spell check on documentation files
        python repo/spell_check_docs_cspell.py --files {staged_files} --quiet

    # Project dictionary changes should trigger spell check
    spell-check-dict:
      glob: "project-words.txt"
      run: |
        echo "Project dictionary updated - running full spell check"
        if ! command -v npx &> /dev/null || ! npx cspell --version &> /dev/null 2>&1; then
          echo "Installing cspell (Code Spell Checker)..."
          ./repo/setup_cspell.sh
        fi
        python repo/spell_check_docs_cspell.py --quiet

    # cspell configuration changes should trigger spell check
    spell-check-config:
      glob: "cspell.json"
      run: |
        echo "cspell configuration updated - running full spell check"
        if ! command -v npx &> /dev/null || ! npx cspell --version &> /dev/null 2>&1; then
          echo "Installing cspell (Code Spell Checker)..."
          ./repo/setup_cspell.sh
        fi
        python repo/spell_check_docs_cspell.py --quiet
